name: Deploy Next.js app

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
      - name: Deploy to VM
        env:
            REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
            NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
            NEXT_PUBLIC_SMTP_HOST: ${{ secrets.NEXT_PUBLIC_SMTP_HOST }}
            NEXT_PUBLIC_SMTP_PORT: ${{ secrets.NEXT_PUBLIC_SMTP_PORT }}
            NEXT_PUBLIC_SMTP_USER: ${{ secrets.NEXT_PUBLIC_SMTP_USER }}
            NEXT_PUBLIC_SMTP_PASSWORD: ${{ secrets.NEXT_PUBLIC_SMTP_PASSWORD }}
            NEXT_PUBLIC_SMTP_FROM_EMAIL: ${{ secrets.NEXT_PUBLIC_SMTP_FROM_EMAIL }}
        run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} << 'EOF'
                # Create deployment directory if it doesn't exist
                mkdir -p ~/nextjs-app
                
                # Go to the directory
                cd ~/nextjs-app
                
                # Clone the repo if .git doesn't exist, otherwise pull latest changes
                if [ ! -d .git ]; then
                  git clone https://x-access-token:${REPO_ACCESS_TOKEN}@github.com/pesolosep/makarapreneur.git .
                else
                  git pull origin main
                fi
                
                # Create environment variables file
                echo "Creating .env.local file..."
                echo "NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}" > .env.local
                echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}" >> .env.local
                echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}" >> .env.local
                echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}" >> .env.local
                echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}" >> .env.local
                echo "NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID}" >> .env.local
                echo "NEXT_PUBLIC_SMTP_HOST=${NEXT_PUBLIC_SMTP_HOST}" >> .env.local
                echo "NEXT_PUBLIC_SMTP_PORT=${NEXT_PUBLIC_SMTP_PORT}" >> .env.local
                echo "NEXT_PUBLIC_SMTP_USER=${NEXT_PUBLIC_SMTP_USER}" >> .env.local
                echo "NEXT_PUBLIC_SMTP_PASSWORD=${NEXT_PUBLIC_SMTP_PASSWORD}" >> .env.local
                echo "NEXT_PUBLIC_SMTP_FROM_EMAIL=${NEXT_PUBLIC_SMTP_FROM_EMAIL}" >> .env.local
                
                # Create a simpler Dockerfile for testing
                echo "FROM node:20-alpine" > Dockerfile
                echo "WORKDIR /app" >> Dockerfile
                echo "COPY package*.json ./" >> Dockerfile
                echo "RUN npm install" >> Dockerfile
                echo "COPY . ." >> Dockerfile
                echo "ENV NODE_ENV=production" >> Dockerfile
                echo "ENV PORT=3000" >> Dockerfile
                echo "ENV HOSTNAME=\"0.0.0.0\"" >> Dockerfile
                echo "RUN npm run build" >> Dockerfile
                echo "EXPOSE 3000" >> Dockerfile
                echo "CMD [\"npm\", \"start\"]" >> Dockerfile
                
                # Clean up any previous containers
                docker stop nextjs-container || true
                docker rm nextjs-container || true
                
                # Build and run the Docker container
                docker build -t nextjs-app . || echo "Docker build failed!"
                docker run -d --name nextjs-container -p 3000:3000 nextjs-app
                
                # Check container status
                docker ps | grep nextjs-container || echo "Container not running!"
                
                # Show logs
                docker logs nextjs-container
            EOF