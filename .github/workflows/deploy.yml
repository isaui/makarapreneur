name: Deploy Next.js app

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
      - name: Deploy to VM
        env:
            REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
            NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
            NEXT_PUBLIC_SMTP_HOST: ${{ secrets.NEXT_PUBLIC_SMTP_HOST }}
            NEXT_PUBLIC_SMTP_PORT: ${{ secrets.NEXT_PUBLIC_SMTP_PORT }}
            NEXT_PUBLIC_SMTP_USER: ${{ secrets.NEXT_PUBLIC_SMTP_USER }}
            NEXT_PUBLIC_SMTP_PASSWORD: ${{ secrets.NEXT_PUBLIC_SMTP_PASSWORD }}
            NEXT_PUBLIC_SMTP_FROM_EMAIL: ${{ secrets.NEXT_PUBLIC_SMTP_FROM_EMAIL }}
        run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.VM_HOST }} << EOF
                # Create deployment directory if it doesn't exist
                mkdir -p ~/nextjs-app
                
                # Go to the directory
                cd ~/nextjs-app
                
                # Clone the repo if .git doesn't exist, otherwise pull latest changes
                if [ ! -d .git ]; then
                  git clone https://x-access-token:${REPO_ACCESS_TOKEN}@github.com/pesolosep/makarapreneur.git .
                else
                  git pull origin main
                fi
                
                # Create .env.local file with Firebase config
                echo "Creating .env.local file..."
                cat > .env.local << ENVFILE
                NEXT_PUBLIC_DEV=${NEXT_PUBLIC_DEV}
                NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
                NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
                NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
                NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}
                NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
                NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID}
                NEXT_PUBLIC_SMTP_HOST=${NEXT_PUBLIC_SMTP_HOST}
                NEXT_PUBLIC_SMTP_PORT=${NEXT_PUBLIC_SMTP_PORT}
                NEXT_PUBLIC_SMTP_USER=${NEXT_PUBLIC_SMTP_USER}
                NEXT_PUBLIC_SMTP_PASSWORD=${NEXT_PUBLIC_SMTP_PASSWORD}
                NEXT_PUBLIC_SMTP_FROM_EMAIL=${NEXT_PUBLIC_SMTP_FROM_EMAIL}
                ENVFILE
                
                # Modify Dockerfile to use a simpler config for testing
                echo "Updating Dockerfile..."
                cat > Dockerfile << 'DOCKERFILE'
                FROM node:20-alpine
                
                WORKDIR /app
                
                COPY package*.json ./
                RUN npm install
                
                COPY . .
                COPY .env.local .
                
                ENV NODE_ENV=production
                ENV PORT=3000
                ENV HOSTNAME="0.0.0.0"
                
                RUN npm run build
                
                EXPOSE 3000
                
                CMD ["npm", "start"]
                DOCKERFILE
                
                # Clean up any previous failed builds
                echo "Cleaning up previous containers..."
                docker stop nextjs-container || true
                docker rm nextjs-container || true
                docker rmi nextjs-app || true
                
                # Build the Docker image with verbose output
                echo "Building Docker image..."
                docker build -t nextjs-app . || { echo "Docker build failed"; exit 1; }
                
                # Run the container and check its status
                echo "Starting Docker container..."
                docker run -d --name nextjs-container -p 3000:3000 nextjs-app
                
                # Give the container a moment to start
                sleep 10
                
                # Check if container is running
                echo "Checking container status..."
                docker ps | grep nextjs-container || echo "Container not running"
                
                # Check container logs for errors
                echo "Container logs:"
                docker logs nextjs-container
                
                # Test if the application is responding
                echo "Testing application response:"
                curl -v http://localhost:3000 || echo "Application not responding"
            EOF